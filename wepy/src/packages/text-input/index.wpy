<style lang='less'>
  // @import '../../common/assets/style/packages/form.wxss';
</style>

<template>
  <view class='form-cell'>
    <db-label :forId='widgetId'>{{label}}</db-label>
    <block wx:if='{{plainText}}'>
      <view id='{{widgetId}}' readonly='{{readOnly}}' name='{{name}}' disabled='{{disabled}}' class='readonly {{cssClasses}}' style='{{cssStyles}}'>{{value ? value : ''}}</view>
    </block>
    <block wx:elif="{{password == 'true'}}">
      <input id='{{widgetId}}' type='{{type}}' placeholder='{{placeholder}}' readonly='{{readOnly}}' name='{{name}}' value='{{value}}' focus='{{focus}}' password='true' placeholder-class='{{placeholderAppearance}}' disabled='{{disabled}}' maxlength="{{maxLength ? maxLength : '-1'}}"
        class='{{cssClasses}}' style='{{cssStyles}}' />
    </block>
    <block wx:else>
      <input id='{{widgetId}}' type='{{type}}' placeholder='{{placeholder}}' readonly='{{readOnly}}' name='{{name}}' value='{{value}}' focus='{{focus}}' placeholder-class='{{placeholderAppearance}}' maxlength="{{maxLength ? maxLength : '-1'}}" disabled='{{disabled}}'
        class='{{cssClasses}}' style='{{cssStyles}}' />
    </block>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import DbLabel from '../label/index'
  const sizeMap = {
    small: 'sm',
    large: 'lg'
  }
  const typeMap = {
    'text': 'text',
    'email': 'email',
    'number': 'number',
    'idCard': 'idcard',
    'digit': 'digit'
  }
  export default class TextInput extends wepy.component {
    components = {
      'db-label': DbLabel
    }
    data = {
      _system_: '',
      cssStyles: '',
      cssClasses: '',
      widgetId: Math.random().toString(36).substring(2)
    }
    props = {
      widgetId: {
        type: String,
        value: ''
      },
      customClass: {
        type: String,
        value: ''
      },
      customStyle: {
        type: String,
        value: ''
      },
      name: {
        type: String,
        value: ''
      },
      type: {
        type: String,
        value: ''
      },
      password: {
        type: Boolean | String,
        value: false
      },
      value: {
        type: String,
        value: ''
      },
      label: {
        type: String,
        value: ''
      },
      placeholder: {
        type: String,
        value: ''
      },
      placeholderAppearance: {
        type: String,
        value: ''
      },
      required: {
        type: Boolean | String,
        value: false
      },
      disabled: {
        type: Boolean | String,
        value: false
      },
      readOnly: {
        type: Boolean | String,
        value: false
      },
      size: {
        type: String,
        value: ''
      },
      focus: {
        type: Boolean | String,
        value: false
      },
      plainText: {
        type: Boolean | String,
        value: false
      },
      maxLength: {
        type: Number | String,
        value: '-1'
      },
      minLength: {
        type: Number | String
      },
      invalidMessage: {
        type: String,
        value: ''
      },
      validMessage: {
        type: String,
        value: ''
      }
    }
    getCssClasses() {
      let cssClasses = [this._getPlaintext(), this._getSize()]
      cssClasses = cssClasses.filter(function(item, index, array) {
        return item !== ''
      })
      return cssClasses.join(' ').trim()
    }
    _getPlaintext() {
      if (this.data.plainText === true || this.data.plainText === 'true') {
        return 'form-control-plaintext'
      }
      return 'form-control'
    }
    _getSize() {
      if (this.data.size && sizeMap[this.data.size]) {
        return 'form-control-' + sizeMap[this.data.size]
      }
      return ''
    }
    computed = {
      type() {
        if (this.data.type && typeMap[this.data.type]) {
          return typeMap[this.data.type]
        }
        return ''
      }
    }
    onLoad() {
      let cssClasses = this.getCssClasses()
      if (cssClasses) {
        this.cssClasses = cssClasses
      }
    }
  }
</script>
